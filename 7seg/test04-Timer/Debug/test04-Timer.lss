
test04-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000380  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800118  00800118  0000042c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd0  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099a  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a1  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000765e  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000329  00000000  00000000  00009a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00009daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002b7a  00000000  00000000  00009df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	73 c0       	rjmp	.+230    	; 0x120 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	5b c1       	rjmp	.+694    	; 0x37c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

int main(void)
{
	//DDRD = 0xff; //DATA DIRECTION REGISTER
	//DDRE |= 0x0f;
	SegPort(&PORTD, &PORTE);
  c8:	63 e2       	ldi	r22, 0x23	; 35
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	4c d0       	rcall	.+152    	; 0x16a <SegPort>
	
//  TIMSK |= 0x01; // 0000 0001b - Timer 0 TCNT overflow interrupt
	TIMSK |= 0x04; // 0000 0001b - Timer 1 TCNT overflow interrupt (16bit)
  d2:	87 b7       	in	r24, 0x37	; 55
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	87 bf       	out	0x37, r24	; 55
	//TIMSK |= 0x40; // 0000 0001b - Timer 2 TCNT overflow interrupt
	
//	TCCR0 = 0x04; //분주비 (Pre-Scaler) 64
	TCCR1B = 0x04;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e bd       	out	0x2e, r24	; 46
	//TCCR2 = 0x04;
	SREG |= 0x80;
  dc:	8f b7       	in	r24, 0x3f	; 63
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8f bf       	out	0x3f, r24	; 63
    sei();
  e2:	78 94       	sei
	while (1) 
    {
		
		if(cnt>= 0x10000)cnt = 0;
  e4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
  e8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
  ec:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
  f0:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
  f4:	00 97       	sbiw	r24, 0x00	; 0
  f6:	a1 40       	sbci	r26, 0x01	; 1
  f8:	b1 05       	cpc	r27, r1
  fa:	40 f0       	brcs	.+16     	; 0x10c <main+0x44>
  fc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 100:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 104:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end+0x2>
 108:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x3>
		SegDisp(cnt);
 10c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
 110:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <__data_end+0x1>
 114:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 118:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x3>
 11c:	72 d0       	rcall	.+228    	; 0x202 <SegDisp>
    }
 11e:	e2 cf       	rjmp	.-60     	; 0xe4 <main+0x1c>

00000120 <__vector_14>:
}

ISR(TIMER1_OVF_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
	cnt++;
 132:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 136:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 13a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__data_end+0x2>
 13e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__data_end+0x3>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 14c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 150:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 154:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
	
	
}
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <SegPort>:
volatile unsigned char *PA = &PORTD, *PB = &PORTE;
int sm = 4;

void SegPort(char *p1, char *p2)
{
	PA = p1; PB = p2;//*PA는 포트 출력 작업이 됨
 16a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PA+0x1>
 16e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PA>
 172:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <PB+0x1>
 176:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <PB>
 17a:	08 95       	ret

0000017c <seg>:
}
void seg(int sel, uint8_t c)
{
	//int i = 0;
	*PB |= 0x0f;
 17c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 180:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 184:	90 81       	ld	r25, Z
 186:	9f 60       	ori	r25, 0x0F	; 15
 188:	90 83       	st	Z, r25
	//PORTE &= ~(1<<(3-sel));
	*PB &= ~(1<<sel);
 18a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 18e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 192:	90 81       	ld	r25, Z
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <seg+0x22>
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <seg+0x1e>
 1a2:	20 95       	com	r18
 1a4:	29 23       	and	r18, r25
 1a6:	20 83       	st	Z, r18
	*PA = c;
 1a8:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PA>
 1ac:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PA+0x1>
 1b0:	60 83       	st	Z, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e1       	ldi	r24, 0x1F	; 31
 1b4:	9e e4       	ldi	r25, 0x4E	; 78
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <seg+0x3a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <seg+0x40>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <FND_4>:
	//_delay_ms(100);
	
}

void FND_4(char *inf) // segment Image 배열
{
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
	for(int i = 0; i< sm ; i++)
 1c8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d0:	12 16       	cp	r1, r18
 1d2:	13 06       	cpc	r1, r19
 1d4:	8c f4       	brge	.+34     	; 0x1f8 <FND_4+0x38>
 1d6:	08 2f       	mov	r16, r24
 1d8:	19 2f       	mov	r17, r25
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		seg(i, *(inf+i));
 1de:	f8 01       	movw	r30, r16
 1e0:	61 91       	ld	r22, Z+
 1e2:	8f 01       	movw	r16, r30
 1e4:	ce 01       	movw	r24, r28
 1e6:	ca df       	rcall	.-108    	; 0x17c <seg>
	
}

void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i< sm ; i++)
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	c8 17       	cp	r28, r24
 1f4:	d9 07       	cpc	r29, r25
 1f6:	9c f3       	brlt	.-26     	; 0x1de <FND_4+0x1e>
	{
		seg(i, *(inf+i));
	}
	
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <SegDisp>:
//문자열 고려서 안전영역 고려
//정적변수 영역에 부여
char* SegDisp(unsigned long num)//10진수 정수 ==> 16진수 문자열로 변환 : 65535 ==> 0xFFFF, 56506 ==> 0xDCBA
{								//16비트 세그문트 이미지 배열
 202:	4f 92       	push	r4
 204:	5f 92       	push	r5
 206:	6f 92       	push	r6
 208:	7f 92       	push	r7
 20a:	8f 92       	push	r8
 20c:	9f 92       	push	r9
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
	DDRD |= 0xff;
 222:	21 b3       	in	r18, 0x11	; 17
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	21 bb       	out	0x11, r18	; 17
	DDRE |= 0x0f;
 228:	22 b1       	in	r18, 0x02	; 2
 22a:	2f 60       	ori	r18, 0x0F	; 15
 22c:	22 b9       	out	0x02, r18	; 2
	num %= 65535;
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	3f ef       	ldi	r19, 0xFF	; 255
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	80 d0       	rcall	.+256    	; 0x338 <__udivmodsi4>
 238:	6b 01       	movw	r12, r22
 23a:	7c 01       	movw	r14, r24
	int n1 = num%10;			//A 1		:문자가 아닌 숫자
 23c:	0f 2e       	mov	r0, r31
 23e:	fa e0       	ldi	r31, 0x0A	; 10
 240:	4f 2e       	mov	r4, r31
 242:	51 2c       	mov	r5, r1
 244:	61 2c       	mov	r6, r1
 246:	71 2c       	mov	r7, r1
 248:	f0 2d       	mov	r31, r0
 24a:	a3 01       	movw	r20, r6
 24c:	92 01       	movw	r18, r4
 24e:	74 d0       	rcall	.+232    	; 0x338 <__udivmodsi4>
 250:	4b 01       	movw	r8, r22
 252:	5c 01       	movw	r10, r24
	int n2 = (num/10)%10;		//B 16		:
 254:	ca 01       	movw	r24, r20
 256:	b9 01       	movw	r22, r18
 258:	a3 01       	movw	r20, r6
 25a:	92 01       	movw	r18, r4
 25c:	6d d0       	rcall	.+218    	; 0x338 <__udivmodsi4>
 25e:	8b 01       	movw	r16, r22
	int n3 = (num/100)%10;	//C 256
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	24 e6       	ldi	r18, 0x64	; 100
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	65 d0       	rcall	.+202    	; 0x338 <__udivmodsi4>
 26e:	ca 01       	movw	r24, r20
 270:	b9 01       	movw	r22, r18
 272:	a3 01       	movw	r20, r6
 274:	92 01       	movw	r18, r4
 276:	60 d0       	rcall	.+192    	; 0x338 <__udivmodsi4>
 278:	eb 01       	movw	r28, r22
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
 27a:	88 ee       	ldi	r24, 0xE8	; 232
 27c:	c8 16       	cp	r12, r24
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	d8 06       	cpc	r13, r24
 282:	e1 04       	cpc	r14, r1
 284:	f1 04       	cpc	r15, r1
 286:	50 f0       	brcs	.+20     	; 0x29c <SegDisp+0x9a>
	DDRE |= 0x0f;
	num %= 65535;
	int n1 = num%10;			//A 1		:문자가 아닌 숫자
	int n2 = (num/10)%10;		//B 16		:
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
 288:	c7 01       	movw	r24, r14
 28a:	b6 01       	movw	r22, r12
 28c:	28 ee       	ldi	r18, 0xE8	; 232
 28e:	33 e0       	ldi	r19, 0x03	; 3
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	51 d0       	rcall	.+162    	; 0x338 <__udivmodsi4>
		{
			n3=17;
			if(!(num/10))n2=17;
		}
	}
	sm=(num>999) ? 4 : (num > 99) ? 3: (num> 9) ? 2: 1;
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	20 c0       	rjmp	.+64     	; 0x2dc <SegDisp+0xda>
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
	{
		n4=17;
		if(!(num/100))
 29c:	84 e6       	ldi	r24, 0x64	; 100
 29e:	c8 16       	cp	r12, r24
 2a0:	d1 04       	cpc	r13, r1
 2a2:	e1 04       	cpc	r14, r1
 2a4:	f1 04       	cpc	r15, r1
 2a6:	68 f4       	brcc	.+26     	; 0x2c2 <SegDisp+0xc0>
		{
			n3=17;
			if(!(num/10))n2=17;
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	c8 16       	cp	r12, r24
 2ac:	d1 04       	cpc	r13, r1
 2ae:	e1 04       	cpc	r14, r1
 2b0:	f1 04       	cpc	r15, r1
 2b2:	60 f0       	brcs	.+24     	; 0x2cc <SegDisp+0xca>
	int n2 = (num/10)%10;		//B 16		:
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
	{
		n4=17;
 2b4:	21 e1       	ldi	r18, 0x11	; 17
 2b6:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/100))
		{
			n3=17;
 2b8:	c1 e1       	ldi	r28, 0x11	; 17
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
			if(!(num/10))n2=17;
		}
	}
	sm=(num>999) ? 4 : (num > 99) ? 3: (num> 9) ? 2: 1;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0d c0       	rjmp	.+26     	; 0x2dc <SegDisp+0xda>
	int n2 = (num/10)%10;		//B 16		:
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
	{
		n4=17;
 2c2:	21 e1       	ldi	r18, 0x11	; 17
 2c4:	30 e0       	ldi	r19, 0x00	; 0
		{
			n3=17;
			if(!(num/10))n2=17;
		}
	}
	sm=(num>999) ? 4 : (num > 99) ? 3: (num> 9) ? 2: 1;
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	08 c0       	rjmp	.+16     	; 0x2dc <SegDisp+0xda>
	int n2 = (num/10)%10;		//B 16		:
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
	{
		n4=17;
 2cc:	21 e1       	ldi	r18, 0x11	; 17
 2ce:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/100))
		{
			n3=17;
 2d0:	c1 e1       	ldi	r28, 0x11	; 17
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
			if(!(num/10))n2=17;
 2d4:	01 e1       	ldi	r16, 0x11	; 17
 2d6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	sm=(num>999) ? 4 : (num > 99) ? 3: (num> 9) ? 2: 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	arr[0] = digit[n1];//char 1byte cast() LED문자로 표현
 2e4:	ec e1       	ldi	r30, 0x1C	; 28
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	d4 01       	movw	r26, r8
 2ea:	aa 5f       	subi	r26, 0xFA	; 250
 2ec:	be 4f       	sbci	r27, 0xFE	; 254
 2ee:	8c 91       	ld	r24, X
 2f0:	80 83       	st	Z, r24
	arr[1] = digit[n2];
 2f2:	d8 01       	movw	r26, r16
 2f4:	aa 5f       	subi	r26, 0xFA	; 250
 2f6:	be 4f       	sbci	r27, 0xFE	; 254
 2f8:	8c 91       	ld	r24, X
 2fa:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3];
 2fc:	ca 5f       	subi	r28, 0xFA	; 250
 2fe:	de 4f       	sbci	r29, 0xFE	; 254
 300:	88 81       	ld	r24, Y
 302:	82 83       	std	Z+2, r24	; 0x02
	arr[3] = digit[n4];
 304:	d9 01       	movw	r26, r18
 306:	aa 5f       	subi	r26, 0xFA	; 250
 308:	be 4f       	sbci	r27, 0xFE	; 254
 30a:	8c 91       	ld	r24, X
	//+, - 빠름
	//* 실수 연산 여러 클럭 사용
	//'/' 연산 여러 클럭 사용
	FND_4(arr);
 30c:	83 83       	std	Z+3, r24	; 0x03
 30e:	cf 01       	movw	r24, r30
 310:	57 df       	rcall	.-338    	; 0x1c0 <FND_4>
	return arr;
	
}
 312:	8c e1       	ldi	r24, 0x1C	; 28
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	ef 90       	pop	r14
 322:	df 90       	pop	r13
 324:	cf 90       	pop	r12
 326:	bf 90       	pop	r11
 328:	af 90       	pop	r10
 32a:	9f 90       	pop	r9
 32c:	8f 90       	pop	r8
 32e:	7f 90       	pop	r7
 330:	6f 90       	pop	r6
 332:	5f 90       	pop	r5
 334:	4f 90       	pop	r4
 336:	08 95       	ret

00000338 <__udivmodsi4>:
 338:	a1 e2       	ldi	r26, 0x21	; 33
 33a:	1a 2e       	mov	r1, r26
 33c:	aa 1b       	sub	r26, r26
 33e:	bb 1b       	sub	r27, r27
 340:	fd 01       	movw	r30, r26
 342:	0d c0       	rjmp	.+26     	; 0x35e <__udivmodsi4_ep>

00000344 <__udivmodsi4_loop>:
 344:	aa 1f       	adc	r26, r26
 346:	bb 1f       	adc	r27, r27
 348:	ee 1f       	adc	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	a2 17       	cp	r26, r18
 34e:	b3 07       	cpc	r27, r19
 350:	e4 07       	cpc	r30, r20
 352:	f5 07       	cpc	r31, r21
 354:	20 f0       	brcs	.+8      	; 0x35e <__udivmodsi4_ep>
 356:	a2 1b       	sub	r26, r18
 358:	b3 0b       	sbc	r27, r19
 35a:	e4 0b       	sbc	r30, r20
 35c:	f5 0b       	sbc	r31, r21

0000035e <__udivmodsi4_ep>:
 35e:	66 1f       	adc	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	88 1f       	adc	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	1a 94       	dec	r1
 368:	69 f7       	brne	.-38     	; 0x344 <__udivmodsi4_loop>
 36a:	60 95       	com	r22
 36c:	70 95       	com	r23
 36e:	80 95       	com	r24
 370:	90 95       	com	r25
 372:	9b 01       	movw	r18, r22
 374:	ac 01       	movw	r20, r24
 376:	bd 01       	movw	r22, r26
 378:	cf 01       	movw	r24, r30
 37a:	08 95       	ret

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
