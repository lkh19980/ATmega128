
test06_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000378  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800118  00800118  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c92  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a21  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059e  00000000  00000000  00001bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000474  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000353  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002a2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1c d0       	rcall	.+56     	; 0xfc <main>
  c4:	57 c1       	rjmp	.+686    	; 0x374 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:

void SegPort(char *p1, char *p2);

void ADC_init(unsigned char channel)
{
	ADMUX |= (1 << REFS0);
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= 0x07;
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADFR);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	86 b9       	out	0x06, r24	; 6
	
	ADMUX  |= (ADMUX & 0xE0); //&=0b11100000;
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	97 b1       	in	r25, 0x07	; 7
  e4:	80 7e       	andi	r24, 0xE0	; 224
  e6:	89 2b       	or	r24, r25
  e8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
  ea:	86 b1       	in	r24, 0x06	; 6
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	86 b9       	out	0x06, r24	; 6
  f0:	08 95       	ret

000000f2 <read_ADC>:
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));
  f2:	34 9b       	sbis	0x06, 4	; 6
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <read_ADC>
	
	return ADC;
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	95 b1       	in	r25, 0x05	; 5
}
  fa:	08 95       	ret

000000fc <main>:
int main(void)
{
	/* Replace with your application code */
	DDRD = 0xff;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	82 b9       	out	0x02, r24	; 2
	DDRF = 0x00;
 104:	e1 e6       	ldi	r30, 0x61	; 97
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	10 82       	st	Z, r1
	DDRF = 0x04;
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	80 83       	st	Z, r24
	
	ADC_init(0);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	db df       	rcall	.-74     	; 0xc8 <ADC_init>
	
	EIMSK = 0x70;
 112:	80 e7       	ldi	r24, 0x70	; 112
 114:	89 bf       	out	0x39, r24	; 57
	EICRB = 0b00101010;
 116:	8a e2       	ldi	r24, 0x2A	; 42
 118:	8a bf       	out	0x3a, r24	; 58
	SegPort(&PORTD, &PORTE);
 11a:	63 e2       	ldi	r22, 0x23	; 35
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	82 e3       	ldi	r24, 0x32	; 50
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	10 d0       	rcall	.+32     	; 0x144 <SegPort>
	SREG |= 0x80;
 124:	8f b7       	in	r24, 0x3f	; 63
 126:	80 68       	ori	r24, 0x80	; 128
	sei(); //set interrupt
 128:	8f bf       	out	0x3f, r24	; 63
	unsigned int read;
	
	while (1)
	{
		read = read_ADC();
 12a:	78 94       	sei
 12c:	e2 df       	rcall	.-60     	; 0xf2 <read_ADC>
		//PORTF = read;
		SegDisp(read);
 12e:	bc 01       	movw	r22, r24
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	4d d0       	rcall	.+154    	; 0x1d0 <SegDisp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	8f e1       	ldi	r24, 0x1F	; 31
 138:	9e e4       	ldi	r25, 0x4E	; 78
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x3e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x44>
 140:	00 00       	nop
 142:	f4 cf       	rjmp	.-24     	; 0x12c <main+0x30>

00000144 <SegPort>:
volatile unsigned char *PA = &PORTD, *PB = &PORTE;
int sm = 4;

void SegPort(char *p1, char *p2)
{
	PA = p1; PB = p2;//*PA는 포트 출력 작업이 됨
 144:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PA+0x1>
 148:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PA>
 14c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <PB+0x1>
 150:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <PB>
 154:	08 95       	ret

00000156 <seg>:
}
void seg(int sel, uint8_t c)
{
	//int i = 0;
	*PB |= 0x0f;
 156:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 15a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 15e:	90 81       	ld	r25, Z
 160:	9f 60       	ori	r25, 0x0F	; 15
 162:	90 83       	st	Z, r25
	//PORTE &= ~(1<<(3-sel));
	*PB &= ~(1<<sel);
 164:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 168:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 16c:	90 81       	ld	r25, Z
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <seg+0x22>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <seg+0x1e>
 17c:	20 95       	com	r18
 17e:	29 23       	and	r18, r25
 180:	20 83       	st	Z, r18
	*PA = c;
 182:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PA>
 186:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PA+0x1>
 18a:	60 83       	st	Z, r22
 18c:	8f e1       	ldi	r24, 0x1F	; 31
 18e:	9e e4       	ldi	r25, 0x4E	; 78
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <seg+0x3a>
 194:	00 c0       	rjmp	.+0      	; 0x196 <seg+0x40>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <FND_4>:
	//_delay_ms(100);
	
}

void FND_4(char *inf) // segment Image 배열
{
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	8c 01       	movw	r16, r24
	for(int i = 0; i< sm ; i++)
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <FND_4+0x1e>
	{
		seg(i, *(inf+i));
 1aa:	f8 01       	movw	r30, r16
 1ac:	ec 0f       	add	r30, r28
 1ae:	fd 1f       	adc	r31, r29
 1b0:	60 81       	ld	r22, Z
 1b2:	ce 01       	movw	r24, r28
 1b4:	d0 df       	rcall	.-96     	; 0x156 <seg>
	
}

void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i< sm ; i++)
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c0:	c8 17       	cp	r28, r24
 1c2:	d9 07       	cpc	r29, r25
 1c4:	94 f3       	brlt	.-28     	; 0x1aa <FND_4+0x10>
	{
		seg(i, *(inf+i));
	}
	
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <SegDisp>:
//문자열 고려서 안전영역 고려
//정적변수 영역에 부여
char* SegDisp(unsigned long num)//10진수 정수 ==> 16진수 문자열로 변환 : 65535 ==> 0xFFFF, 56506 ==> 0xDCBA
{								//16비트 세그문트 이미지 배열
 1d0:	4f 92       	push	r4
 1d2:	5f 92       	push	r5
 1d4:	6f 92       	push	r6
 1d6:	7f 92       	push	r7
 1d8:	8f 92       	push	r8
 1da:	9f 92       	push	r9
 1dc:	af 92       	push	r10
 1de:	bf 92       	push	r11
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
	DDRD |= 0xff;
 1f0:	21 b3       	in	r18, 0x11	; 17
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	21 bb       	out	0x11, r18	; 17
	DDRE |= 0x0f;
 1f6:	22 b1       	in	r18, 0x02	; 2
 1f8:	2f 60       	ori	r18, 0x0F	; 15
 1fa:	22 b9       	out	0x02, r18	; 2
	num %= 65535;
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	3f ef       	ldi	r19, 0xFF	; 255
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	95 d0       	rcall	.+298    	; 0x330 <__udivmodsi4>
 206:	6b 01       	movw	r12, r22
 208:	7c 01       	movw	r14, r24
	int n1 = num%10;			//A 1		:문자가 아닌 숫자
 20a:	0f 2e       	mov	r0, r31
 20c:	fa e0       	ldi	r31, 0x0A	; 10
 20e:	4f 2e       	mov	r4, r31
 210:	51 2c       	mov	r5, r1
 212:	61 2c       	mov	r6, r1
 214:	71 2c       	mov	r7, r1
 216:	f0 2d       	mov	r31, r0
 218:	a3 01       	movw	r20, r6
 21a:	92 01       	movw	r18, r4
 21c:	89 d0       	rcall	.+274    	; 0x330 <__udivmodsi4>
 21e:	4b 01       	movw	r8, r22
 220:	5c 01       	movw	r10, r24
	int n2 = (num/10)%10;		//B 16		:
 222:	ca 01       	movw	r24, r20
 224:	b9 01       	movw	r22, r18
 226:	a3 01       	movw	r20, r6
 228:	92 01       	movw	r18, r4
 22a:	82 d0       	rcall	.+260    	; 0x330 <__udivmodsi4>
 22c:	8b 01       	movw	r16, r22
	int n3 = (num/100)%10;	//C 256
 22e:	c7 01       	movw	r24, r14
 230:	b6 01       	movw	r22, r12
 232:	24 e6       	ldi	r18, 0x64	; 100
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	7a d0       	rcall	.+244    	; 0x330 <__udivmodsi4>
 23c:	ca 01       	movw	r24, r20
 23e:	b9 01       	movw	r22, r18
 240:	a3 01       	movw	r20, r6
 242:	92 01       	movw	r18, r4
 244:	75 d0       	rcall	.+234    	; 0x330 <__udivmodsi4>
 246:	eb 01       	movw	r28, r22
	int n4 = num/1000;		//D 4096	
 248:	c7 01       	movw	r24, r14
 24a:	b6 01       	movw	r22, r12
 24c:	28 ee       	ldi	r18, 0xE8	; 232
 24e:	33 e0       	ldi	r19, 0x03	; 3
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	6d d0       	rcall	.+218    	; 0x330 <__udivmodsi4>
	if(!(num/1000))
 256:	88 ee       	ldi	r24, 0xE8	; 232
 258:	c8 16       	cp	r12, r24
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	d8 06       	cpc	r13, r24
 25e:	e1 04       	cpc	r14, r1
 260:	f1 04       	cpc	r15, r1
 262:	d0 f4       	brcc	.+52     	; 0x298 <SegDisp+0xc8>
	{
		n4=17;
		if(!(num/100))
 264:	84 e6       	ldi	r24, 0x64	; 100
 266:	c8 16       	cp	r12, r24
 268:	d1 04       	cpc	r13, r1
 26a:	e1 04       	cpc	r14, r1
 26c:	f1 04       	cpc	r15, r1
 26e:	58 f4       	brcc	.+22     	; 0x286 <SegDisp+0xb6>
		{
			n3=17;
			if(!(num/10))n2=17;
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	c8 16       	cp	r12, r24
 274:	d1 04       	cpc	r13, r1
 276:	e1 04       	cpc	r14, r1
 278:	f1 04       	cpc	r15, r1
 27a:	40 f0       	brcs	.+16     	; 0x28c <SegDisp+0xbc>
	int n2 = (num/10)%10;		//B 16		:
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
	{
		n4=17;
 27c:	21 e1       	ldi	r18, 0x11	; 17
 27e:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/100))
		{
			n3=17;
 280:	c1 e1       	ldi	r28, 0x11	; 17
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	09 c0       	rjmp	.+18     	; 0x298 <SegDisp+0xc8>
	int n2 = (num/10)%10;		//B 16		:
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
	{
		n4=17;
 286:	21 e1       	ldi	r18, 0x11	; 17
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	06 c0       	rjmp	.+12     	; 0x298 <SegDisp+0xc8>
 28c:	21 e1       	ldi	r18, 0x11	; 17
 28e:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/100))
		{
			n3=17;
 290:	c1 e1       	ldi	r28, 0x11	; 17
 292:	d0 e0       	ldi	r29, 0x00	; 0
			if(!(num/10))n2=17;
 294:	01 e1       	ldi	r16, 0x11	; 17
 296:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	sm=(num>999) ? 4 : (num > 99) ? 3: (num> 9) ? 2: 1;
 298:	88 ee       	ldi	r24, 0xE8	; 232
 29a:	c8 16       	cp	r12, r24
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	d8 06       	cpc	r13, r24
 2a0:	e1 04       	cpc	r14, r1
 2a2:	f1 04       	cpc	r15, r1
 2a4:	78 f4       	brcc	.+30     	; 0x2c4 <SegDisp+0xf4>
 2a6:	84 e6       	ldi	r24, 0x64	; 100
 2a8:	c8 16       	cp	r12, r24
 2aa:	d1 04       	cpc	r13, r1
 2ac:	e1 04       	cpc	r14, r1
 2ae:	f1 04       	cpc	r15, r1
 2b0:	60 f4       	brcc	.+24     	; 0x2ca <SegDisp+0xfa>
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	c8 16       	cp	r12, r24
 2b6:	d1 04       	cpc	r13, r1
 2b8:	e1 04       	cpc	r14, r1
 2ba:	f1 04       	cpc	r15, r1
 2bc:	48 f0       	brcs	.+18     	; 0x2d0 <SegDisp+0x100>
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <SegDisp+0x104>
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <SegDisp+0x104>
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <SegDisp+0x104>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	arr[0] = digit[n1];//char 1byte cast() LED문자로 표현
 2dc:	f4 01       	movw	r30, r8
 2de:	ea 5f       	subi	r30, 0xFA	; 250
 2e0:	fe 4f       	sbci	r31, 0xFE	; 254
 2e2:	80 81       	ld	r24, Z
 2e4:	e8 e1       	ldi	r30, 0x18	; 24
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	80 83       	st	Z, r24
	arr[1] = digit[n2];
 2ea:	d8 01       	movw	r26, r16
 2ec:	aa 5f       	subi	r26, 0xFA	; 250
 2ee:	be 4f       	sbci	r27, 0xFE	; 254
 2f0:	8c 91       	ld	r24, X
 2f2:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3];
 2f4:	ca 5f       	subi	r28, 0xFA	; 250
 2f6:	de 4f       	sbci	r29, 0xFE	; 254
 2f8:	88 81       	ld	r24, Y
 2fa:	82 83       	std	Z+2, r24	; 0x02
	arr[3] = digit[n4];
 2fc:	d9 01       	movw	r26, r18
 2fe:	aa 5f       	subi	r26, 0xFA	; 250
 300:	be 4f       	sbci	r27, 0xFE	; 254
 302:	8c 91       	ld	r24, X
	//+, - 빠름
	//* 실수 연산 여러 클럭 사용
	//'/' 연산 여러 클럭 사용
	FND_4(arr);
 304:	83 83       	std	Z+3, r24	; 0x03
 306:	cf 01       	movw	r24, r30
 308:	48 df       	rcall	.-368    	; 0x19a <FND_4>
	return arr;
	
}
 30a:	88 e1       	ldi	r24, 0x18	; 24
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	bf 90       	pop	r11
 320:	af 90       	pop	r10
 322:	9f 90       	pop	r9
 324:	8f 90       	pop	r8
 326:	7f 90       	pop	r7
 328:	6f 90       	pop	r6
 32a:	5f 90       	pop	r5
 32c:	4f 90       	pop	r4
 32e:	08 95       	ret

00000330 <__udivmodsi4>:
 330:	a1 e2       	ldi	r26, 0x21	; 33
 332:	1a 2e       	mov	r1, r26
 334:	aa 1b       	sub	r26, r26
 336:	bb 1b       	sub	r27, r27
 338:	fd 01       	movw	r30, r26
 33a:	0d c0       	rjmp	.+26     	; 0x356 <__udivmodsi4_ep>

0000033c <__udivmodsi4_loop>:
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	ee 1f       	adc	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	a2 17       	cp	r26, r18
 346:	b3 07       	cpc	r27, r19
 348:	e4 07       	cpc	r30, r20
 34a:	f5 07       	cpc	r31, r21
 34c:	20 f0       	brcs	.+8      	; 0x356 <__udivmodsi4_ep>
 34e:	a2 1b       	sub	r26, r18
 350:	b3 0b       	sbc	r27, r19
 352:	e4 0b       	sbc	r30, r20
 354:	f5 0b       	sbc	r31, r21

00000356 <__udivmodsi4_ep>:
 356:	66 1f       	adc	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	88 1f       	adc	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	1a 94       	dec	r1
 360:	69 f7       	brne	.-38     	; 0x33c <__udivmodsi4_loop>
 362:	60 95       	com	r22
 364:	70 95       	com	r23
 366:	80 95       	com	r24
 368:	90 95       	com	r25
 36a:	9b 01       	movw	r18, r22
 36c:	ac 01       	movw	r20, r24
 36e:	bd 01       	movw	r22, r26
 370:	cf 01       	movw	r24, r30
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
