
test_06_ADC_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800118  00800118  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c4e  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a08  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058f  00000000  00000000  00001b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047d  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000353  00000000  00000000  0000261d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	07 d0       	rcall	.+14     	; 0xd2 <main>
  c4:	2c c1       	rjmp	.+600    	; 0x31e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <read_ADC>:
	ADCSRA |= (1 << ADSC);
}

int read_ADC(void)
{
	while(!(ADCSRA & (1 << ADIF)));
  c8:	34 9b       	sbis	0x06, 4	; 6
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <read_ADC>
	
	return ADC;
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	95 b1       	in	r25, 0x05	; 5
}
  d0:	08 95       	ret

000000d2 <main>:
int main(void)
{
	/* Replace with your application code */
	DDRD = 0xff;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0f;
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	82 b9       	out	0x02, r24	; 2
	DDRF = 0x00;
  da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	EIMSK = 0x70;
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	89 bf       	out	0x39, r24	; 57
	
	unsigned int read;
	
	while (1)
	{
		read = read_ADC();
  e2:	f2 df       	rcall	.-28     	; 0xc8 <read_ADC>
		SegDisp(read);
  e4:	bc 01       	movw	r22, r24
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	47 d0       	rcall	.+142    	; 0x17a <SegDisp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	83 ed       	ldi	r24, 0xD3	; 211
  f0:	90 e3       	ldi	r25, 0x30	; 48
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x20>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x2a>
  fc:	00 00       	nop
  fe:	f1 cf       	rjmp	.-30     	; 0xe2 <main+0x10>

00000100 <seg>:
	PA = p1; PB = p2;//*PA는 포트 출력 작업이 됨
}
void seg(int sel, uint8_t c)
{
	//int i = 0;
	*PB |= 0x0f;
 100:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 104:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 108:	90 81       	ld	r25, Z
 10a:	9f 60       	ori	r25, 0x0F	; 15
 10c:	90 83       	st	Z, r25
	//PORTE &= ~(1<<(3-sel));
	*PB &= ~(1<<sel);
 10e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PB>
 112:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PB+0x1>
 116:	90 81       	ld	r25, Z
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <seg+0x22>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	8a 95       	dec	r24
 124:	e2 f7       	brpl	.-8      	; 0x11e <seg+0x1e>
 126:	20 95       	com	r18
 128:	29 23       	and	r18, r25
 12a:	20 83       	st	Z, r18
	*PA = c;
 12c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PA>
 130:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PA+0x1>
 134:	60 83       	st	Z, r22
 136:	8f e1       	ldi	r24, 0x1F	; 31
 138:	9e e4       	ldi	r25, 0x4E	; 78
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <seg+0x3a>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <seg+0x40>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <FND_4>:
	//_delay_ms(100);
	
}

void FND_4(char *inf) // segment Image 배열
{
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	8c 01       	movw	r16, r24
	for(int i = 0; i< sm ; i++)
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	07 c0       	rjmp	.+14     	; 0x162 <FND_4+0x1e>
	{
		seg(i, *(inf+i));
 154:	f8 01       	movw	r30, r16
 156:	ec 0f       	add	r30, r28
 158:	fd 1f       	adc	r31, r29
 15a:	60 81       	ld	r22, Z
 15c:	ce 01       	movw	r24, r28
 15e:	d0 df       	rcall	.-96     	; 0x100 <seg>
	
}

void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i< sm ; i++)
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	c8 17       	cp	r28, r24
 16c:	d9 07       	cpc	r29, r25
 16e:	94 f3       	brlt	.-28     	; 0x154 <FND_4+0x10>
	{
		seg(i, *(inf+i));
	}
	
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <SegDisp>:
//문자열 고려서 안전영역 고려
//정적변수 영역에 부여
char* SegDisp(unsigned long num)//10진수 정수 ==> 16진수 문자열로 변환 : 65535 ==> 0xFFFF, 56506 ==> 0xDCBA
{								//16비트 세그문트 이미지 배열
 17a:	4f 92       	push	r4
 17c:	5f 92       	push	r5
 17e:	6f 92       	push	r6
 180:	7f 92       	push	r7
 182:	8f 92       	push	r8
 184:	9f 92       	push	r9
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	DDRD |= 0xff;
 19a:	21 b3       	in	r18, 0x11	; 17
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	21 bb       	out	0x11, r18	; 17
	DDRE |= 0x0f;
 1a0:	22 b1       	in	r18, 0x02	; 2
 1a2:	2f 60       	ori	r18, 0x0F	; 15
 1a4:	22 b9       	out	0x02, r18	; 2
	num %= 65535;
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	3f ef       	ldi	r19, 0xFF	; 255
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	95 d0       	rcall	.+298    	; 0x2da <__udivmodsi4>
 1b0:	6b 01       	movw	r12, r22
 1b2:	7c 01       	movw	r14, r24
	int n1 = num%10;			//A 1		:문자가 아닌 숫자
 1b4:	0f 2e       	mov	r0, r31
 1b6:	fa e0       	ldi	r31, 0x0A	; 10
 1b8:	4f 2e       	mov	r4, r31
 1ba:	51 2c       	mov	r5, r1
 1bc:	61 2c       	mov	r6, r1
 1be:	71 2c       	mov	r7, r1
 1c0:	f0 2d       	mov	r31, r0
 1c2:	a3 01       	movw	r20, r6
 1c4:	92 01       	movw	r18, r4
 1c6:	89 d0       	rcall	.+274    	; 0x2da <__udivmodsi4>
 1c8:	4b 01       	movw	r8, r22
 1ca:	5c 01       	movw	r10, r24
	int n2 = (num/10)%10;		//B 16		:
 1cc:	ca 01       	movw	r24, r20
 1ce:	b9 01       	movw	r22, r18
 1d0:	a3 01       	movw	r20, r6
 1d2:	92 01       	movw	r18, r4
 1d4:	82 d0       	rcall	.+260    	; 0x2da <__udivmodsi4>
 1d6:	8b 01       	movw	r16, r22
	int n3 = (num/100)%10;	//C 256
 1d8:	c7 01       	movw	r24, r14
 1da:	b6 01       	movw	r22, r12
 1dc:	24 e6       	ldi	r18, 0x64	; 100
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	7a d0       	rcall	.+244    	; 0x2da <__udivmodsi4>
 1e6:	ca 01       	movw	r24, r20
 1e8:	b9 01       	movw	r22, r18
 1ea:	a3 01       	movw	r20, r6
 1ec:	92 01       	movw	r18, r4
 1ee:	75 d0       	rcall	.+234    	; 0x2da <__udivmodsi4>
 1f0:	eb 01       	movw	r28, r22
	int n4 = num/1000;		//D 4096	
 1f2:	c7 01       	movw	r24, r14
 1f4:	b6 01       	movw	r22, r12
 1f6:	28 ee       	ldi	r18, 0xE8	; 232
 1f8:	33 e0       	ldi	r19, 0x03	; 3
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	6d d0       	rcall	.+218    	; 0x2da <__udivmodsi4>
	if(!(num/1000))
 200:	88 ee       	ldi	r24, 0xE8	; 232
 202:	c8 16       	cp	r12, r24
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	d8 06       	cpc	r13, r24
 208:	e1 04       	cpc	r14, r1
 20a:	f1 04       	cpc	r15, r1
 20c:	d0 f4       	brcc	.+52     	; 0x242 <SegDisp+0xc8>
	{
		n4=17;
		if(!(num/100))
 20e:	84 e6       	ldi	r24, 0x64	; 100
 210:	c8 16       	cp	r12, r24
 212:	d1 04       	cpc	r13, r1
 214:	e1 04       	cpc	r14, r1
 216:	f1 04       	cpc	r15, r1
 218:	58 f4       	brcc	.+22     	; 0x230 <SegDisp+0xb6>
		{
			n3=17;
			if(!(num/10))n2=17;
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	c8 16       	cp	r12, r24
 21e:	d1 04       	cpc	r13, r1
 220:	e1 04       	cpc	r14, r1
 222:	f1 04       	cpc	r15, r1
 224:	40 f0       	brcs	.+16     	; 0x236 <SegDisp+0xbc>
	int n2 = (num/10)%10;		//B 16		:
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
	{
		n4=17;
 226:	21 e1       	ldi	r18, 0x11	; 17
 228:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/100))
		{
			n3=17;
 22a:	c1 e1       	ldi	r28, 0x11	; 17
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	09 c0       	rjmp	.+18     	; 0x242 <SegDisp+0xc8>
	int n2 = (num/10)%10;		//B 16		:
	int n3 = (num/100)%10;	//C 256
	int n4 = num/1000;		//D 4096	
	if(!(num/1000))
	{
		n4=17;
 230:	21 e1       	ldi	r18, 0x11	; 17
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	06 c0       	rjmp	.+12     	; 0x242 <SegDisp+0xc8>
 236:	21 e1       	ldi	r18, 0x11	; 17
 238:	30 e0       	ldi	r19, 0x00	; 0
		if(!(num/100))
		{
			n3=17;
 23a:	c1 e1       	ldi	r28, 0x11	; 17
 23c:	d0 e0       	ldi	r29, 0x00	; 0
			if(!(num/10))n2=17;
 23e:	01 e1       	ldi	r16, 0x11	; 17
 240:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	sm=(num>999) ? 4 : (num > 99) ? 3: (num> 9) ? 2: 1;
 242:	88 ee       	ldi	r24, 0xE8	; 232
 244:	c8 16       	cp	r12, r24
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	d8 06       	cpc	r13, r24
 24a:	e1 04       	cpc	r14, r1
 24c:	f1 04       	cpc	r15, r1
 24e:	78 f4       	brcc	.+30     	; 0x26e <SegDisp+0xf4>
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	c8 16       	cp	r12, r24
 254:	d1 04       	cpc	r13, r1
 256:	e1 04       	cpc	r14, r1
 258:	f1 04       	cpc	r15, r1
 25a:	60 f4       	brcc	.+24     	; 0x274 <SegDisp+0xfa>
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	c8 16       	cp	r12, r24
 260:	d1 04       	cpc	r13, r1
 262:	e1 04       	cpc	r14, r1
 264:	f1 04       	cpc	r15, r1
 266:	48 f0       	brcs	.+18     	; 0x27a <SegDisp+0x100>
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	08 c0       	rjmp	.+16     	; 0x27e <SegDisp+0x104>
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	05 c0       	rjmp	.+10     	; 0x27e <SegDisp+0x104>
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <SegDisp+0x104>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	arr[0] = digit[n1];//char 1byte cast() LED문자로 표현
 286:	f4 01       	movw	r30, r8
 288:	ea 5f       	subi	r30, 0xFA	; 250
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	80 81       	ld	r24, Z
 28e:	e8 e1       	ldi	r30, 0x18	; 24
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	80 83       	st	Z, r24
	arr[1] = digit[n2];
 294:	d8 01       	movw	r26, r16
 296:	aa 5f       	subi	r26, 0xFA	; 250
 298:	be 4f       	sbci	r27, 0xFE	; 254
 29a:	8c 91       	ld	r24, X
 29c:	81 83       	std	Z+1, r24	; 0x01
	arr[2] = digit[n3];
 29e:	ca 5f       	subi	r28, 0xFA	; 250
 2a0:	de 4f       	sbci	r29, 0xFE	; 254
 2a2:	88 81       	ld	r24, Y
 2a4:	82 83       	std	Z+2, r24	; 0x02
	arr[3] = digit[n4];
 2a6:	d9 01       	movw	r26, r18
 2a8:	aa 5f       	subi	r26, 0xFA	; 250
 2aa:	be 4f       	sbci	r27, 0xFE	; 254
 2ac:	8c 91       	ld	r24, X
	//+, - 빠름
	//* 실수 연산 여러 클럭 사용
	//'/' 연산 여러 클럭 사용
	FND_4(arr);
 2ae:	83 83       	std	Z+3, r24	; 0x03
 2b0:	cf 01       	movw	r24, r30
 2b2:	48 df       	rcall	.-368    	; 0x144 <FND_4>
	return arr;
	
}
 2b4:	88 e1       	ldi	r24, 0x18	; 24
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	bf 90       	pop	r11
 2ca:	af 90       	pop	r10
 2cc:	9f 90       	pop	r9
 2ce:	8f 90       	pop	r8
 2d0:	7f 90       	pop	r7
 2d2:	6f 90       	pop	r6
 2d4:	5f 90       	pop	r5
 2d6:	4f 90       	pop	r4
 2d8:	08 95       	ret

000002da <__udivmodsi4>:
 2da:	a1 e2       	ldi	r26, 0x21	; 33
 2dc:	1a 2e       	mov	r1, r26
 2de:	aa 1b       	sub	r26, r26
 2e0:	bb 1b       	sub	r27, r27
 2e2:	fd 01       	movw	r30, r26
 2e4:	0d c0       	rjmp	.+26     	; 0x300 <__udivmodsi4_ep>

000002e6 <__udivmodsi4_loop>:
 2e6:	aa 1f       	adc	r26, r26
 2e8:	bb 1f       	adc	r27, r27
 2ea:	ee 1f       	adc	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	a2 17       	cp	r26, r18
 2f0:	b3 07       	cpc	r27, r19
 2f2:	e4 07       	cpc	r30, r20
 2f4:	f5 07       	cpc	r31, r21
 2f6:	20 f0       	brcs	.+8      	; 0x300 <__udivmodsi4_ep>
 2f8:	a2 1b       	sub	r26, r18
 2fa:	b3 0b       	sbc	r27, r19
 2fc:	e4 0b       	sbc	r30, r20
 2fe:	f5 0b       	sbc	r31, r21

00000300 <__udivmodsi4_ep>:
 300:	66 1f       	adc	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	88 1f       	adc	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	1a 94       	dec	r1
 30a:	69 f7       	brne	.-38     	; 0x2e6 <__udivmodsi4_loop>
 30c:	60 95       	com	r22
 30e:	70 95       	com	r23
 310:	80 95       	com	r24
 312:	90 95       	com	r25
 314:	9b 01       	movw	r18, r22
 316:	ac 01       	movw	r20, r24
 318:	bd 01       	movw	r22, r26
 31a:	cf 01       	movw	r24, r30
 31c:	08 95       	ret

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
